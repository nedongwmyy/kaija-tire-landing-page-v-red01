const fs = require('fs');
const path = require('path');
const { globSync } = require('glob');

// Function to generate sitemap
function generateSitemap() {
  // 获取所有页面路径
  const appDir = path.join(__dirname, 'app');
  
  let routes = [];
  
  if (fs.existsSync(appDir)) {
    // 递归查找 app 目录下的 page.tsx 文件
    const appPages = globSync('**/page.{js,jsx,ts,tsx}', {
      cwd: appDir,
      ignore: ['**/node_modules/**', '**/.next/**', '**/layout.{js,jsx,ts,tsx}', '**/page-builder/**']
    });
    
    routes = appPages
      .map(page => {
        // 将文件路径转换为路由路径
        let route = page;
        
        // 处理根目录 page 文件
        if (route === 'page.tsx' || route === 'page.jsx' || route === 'page.js' || route === 'page.ts') {
          return null; // 根路径将单独处理
        }
        
        // 处理子目录中的 page 文件
        const pageFileRegex = /\/(page\.(tsx|jsx|js|ts))$/;
        if (pageFileRegex.test(route)) {
          route = route.replace(pageFileRegex, '');
        }
        
        // 处理特殊路由，如 [id] 等动态路由
        route = route.replace(/\[.*?\]/g, ':param');
        
        // 转换为 URL 路径
        route = '/' + route;
        return route;
      })
      .filter(route => route !== null && route !== '/');
  }
  
  // 获取当前日期
  const today = new Date().toISOString().split('T')[0];
  
  // 生成站点地图内容
  let sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>
<urlset
      xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
            http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
<!-- Generated by Next.js site at ${today} -->

`;

  // 添加根路径
  const rootUrl = `https://kaijatire.kaijatire.com/`;
  
  sitemapContent += `  <url>
    <loc>${rootUrl}</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>1.0</priority>
  </url>
  
`;

  // 添加每个路由
  routes.forEach(route => {
    const fullUrl = `https://kaijatire.kaijatire.com${route}`;
    
    sitemapContent += `  <url>
    <loc>${fullUrl}</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
  
`;
  });

  sitemapContent += '</urlset>';

  // 确保 public 目录存在
  const publicDir = path.join(__dirname, 'public');
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }
  
  // 写入 public 目录下的 sitemap.xml 文件
  const sitemapPath = path.join(publicDir, 'sitemap.xml');
  fs.writeFileSync(sitemapPath, sitemapContent);
  
  console.log(`Sitemap generated with ${routes.length + 1} URLs:`, sitemapPath);
}

// 运行生成函数
generateSitemap();